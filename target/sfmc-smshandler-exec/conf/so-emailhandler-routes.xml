<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:camel="http://camel.apache.org/schema/spring"
	xsi:schemaLocation="
       http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd
       http://camel.apache.org/schema/spring http://camel.apache.org/schema/spring/camel-spring.xsd">
	
	<camel:camelContext streamCache="true">
	
		<camel:propertyPlaceholder id="propertyConfigurer">
			<camel:propertiesLocation resolver="file" path="${CONFIG_HOME}/so-emailhandler.properties"/>
		</camel:propertyPlaceholder>
		
		<camel:dataFormats>
			<camel:json id="json" library="Jackson" />
		</camel:dataFormats>
		
		<!--
			1. This route accepts input (JSON) from Kafka topic
			2. Stores the JSON in property called OriginalMessage
			3. Check if isControl is null or false, if yes proceed to step 3.1 
			   3.1 Whitelisting functionality enabled, EMAIL request is proceeded only for the 2 cases
               		3.1.1 so.whitelisting.enable = true and msisdn in so.white.listed.numbers 
               		3.1.2 so.whitelisting.enable = false  
			4. Otherwise Not processing any control group messages
		 -->
		<camel:route id="inputRoute" startupOrder="3">
			<camel:from uri="kafka:{{so.email.input.topic}}?brokers={{env:SIFT_QUEUES}}&amp;autoOffsetReset={{env:AUTO_OFFSET_RESET}}&amp;groupId={{env:GROUP_ID}}&amp;maxPollIntervalMs={{env:MAX_POLL_INTERVAL_MS_CONFIG}}&amp;maxPollRecords={{env:MAX_POLL_RECORDS_CONFIG}}" />
			<camel:log loggingLevel="INFO" message="EMAIL Message received: ${body}" />
			<camel:setProperty propertyName="OriginalMessage">
				<camel:simple>${body}</camel:simple>
			</camel:setProperty>
			<camel:unmarshal ref="json" />
			<camel:choice>
				<camel:when>
					<camel:simple>${body[isControl]} == null || ${body[isControl]} == false</camel:simple>
					<camel:choice>
                        <camel:when>
                            <camel:simple>{{env:SO_WHITELISTING_ENABLE}} == "false"</camel:simple>
                            <camel:to uri="seda:contactPolicyCheck?size={{env:SEDA_CONTACT_POLICY_SIZE}}&amp;waitForTaskToComplete=Never&amp;blockWhenFull=true" />
                        </camel:when>
                        <camel:when>
                            <camel:simple>{{env:SO_WHITELISTING_ENABLE}} == "true" and ${body[msisdn]} in "{{env:SO_WHITE_LISTED_EMAILS}}"</camel:simple>
							<camel:to uri="seda:contactPolicyCheck?size={{env:SEDA_CONTACT_POLICY_SIZE}}&amp;waitForTaskToComplete=Never&amp;blockWhenFull=true" />
                        </camel:when>
                        <camel:otherwise>
                             <camel:log loggingLevel="INFO" message="Non white-listed email : email -> ${body[msisdn]}"></camel:log>
                        </camel:otherwise>
                    </camel:choice>
				</camel:when>
				<camel:otherwise>
					<camel:log loggingLevel="INFO" message="Not Processing - Control Group Message" />
				</camel:otherwise>
			</camel:choice>
		</camel:route>
		
		<!--
			1. This route checks whether input is from core or from sfmc depending on triggerSource
				1.1 if it is from core forwarded to emailAPIRoute
				1.2 otherwise invokes freemarker and sends an API call to check the contactPolicyCheck , if it is success then routed to smsAPIRoute
		 -->
		<camel:route id="contactPolicyCheckRoute" startupOrder="4">
			<camel:from uri="seda:contactPolicyCheck?size={{env:SEDA_CONTACT_POLICY_SIZE}}&amp;concurrentConsumers={{env:SEDA_CONTACT_POLICY_CONCURRENT_CONSUMERS}}" />
			<camel:onException>
				<camel:exception>org.apache.camel.http.common.HttpOperationFailedException</camel:exception>
				<camel:onWhen>
					<camel:simple>${exception.statusCode} != 200  || ${exception.statusCode} != 202 </camel:simple>
				</camel:onWhen>
				<camel:redeliveryPolicy maximumRedeliveries="3" redeliveryDelay="5000" backOffMultiplier="4" retryAttemptedLogLevel="WARN" logRetryAttempted="true" />
				<camel:handled>
					<camel:constant>true</camel:constant>
				</camel:handled>
				<camel:setHeader headerName="HttpStatusCode">
					<camel:simple>${exception.statusCode}</camel:simple>
				</camel:setHeader>
				<camel:log loggingLevel="ERROR" message="HttpResponse : body -> ${body} - headers -> ${headers}" />
			</camel:onException>
			<camel:choice>
				<camel:when>
					<camel:simple>${body[triggerSource]} == "{{env:TRIGGER_SOURCE_CORE}}"</camel:simple>
					<camel:log loggingLevel="INFO" message="Message received from core" />
					<camel:to uri="direct:registerContact" />
					<camel:choice>
						<camel:when>
							<camel:simple>${headers.CamelHttpResponseCode} in {{so.email.successCodes}}</camel:simple>
							<camel:setBody>
								<camel:simple>${property.OriginalMessage}</camel:simple>
							</camel:setBody>
							<camel:unmarshal ref="json" />
							<camel:to uri="seda:sendEMAILRequest?size={{env:SEDA_EMAILAPI_SIZE}}&amp;waitForTaskToComplete=Never&amp;blockWhenFull=true" />
						</camel:when>
					</camel:choice>
				</camel:when>
				<camel:otherwise>
					<camel:log loggingLevel="INFO" message="Message received from SFMC" />
					<camel:to uri="direct:registerContact" />
					<camel:unmarshal ref="json" />
					<camel:choice>
						<camel:when>
							<camel:simple>${body[result]} != null and ${body[result][email]} == true</camel:simple>
							<camel:setBody>
								<camel:simple>${property.OriginalMessage}</camel:simple>
							</camel:setBody>
							<camel:unmarshal ref="json" />
							<camel:to uri="seda:sendEMAILRequest?size={{env:SEDA_EMAILAPI_SIZE}}&amp;waitForTaskToComplete=Never&amp;blockWhenFull=true" />
						</camel:when>
						<camel:otherwise>
							<camel:log loggingLevel="INFO" message="Contact policy exceeded" />
						</camel:otherwise>
					</camel:choice>		
				</camel:otherwise>
			</camel:choice>
		</camel:route>
		
		<!-- 
			1. Throttle messages by setting the maximum number of requests per second as x, where x is configurable in properties
			2. Invoke freemarker template for preparing email request
			3. Set following headers for API call
				3.1 Authorization: Bearer <<access_Token>>
				3.2 RestURL: https://<HOSTNAME>>/
			4. Invoke SFMSC Messaging API. Where url will be from header RestURL and path will be configurable in enviornment
			6. Check for responseCode received. 
				6.1 If success send to contactPolicyRoute
				6.2 Send to registerActionRoute and dbLoggingRoute for success and failure responses
		 -->
		<camel:route id="emailAPIRoute" startupOrder="5">
			<camel:from uri="seda:sendEMAILRequest?size={{env:SEDA_EMAILAPI_SIZE}}&amp;concurrentConsumers={{env:SEDA_EMAILAPI_CONCURRENT_CONSUMERS}}" />
			<camel:onException>
				<camel:exception>org.apache.camel.http.common.HttpOperationFailedException</camel:exception>
				<camel:onWhen>
					<camel:simple>${exception.statusCode} == 403 || ${exception.statusCode} == 401</camel:simple>
				</camel:onWhen>
				<camel:redeliveryPolicy maximumRedeliveries="3" redeliveryDelay="5000" backOffMultiplier="4" retryAttemptedLogLevel="WARN" logRetryAttempted="true" />
				<camel:handled>
					<camel:constant>true</camel:constant>
				</camel:handled>
				<camel:setHeader headerName="HttpStatusCode">
					<camel:simple>${exception.statusCode}</camel:simple>
				</camel:setHeader>
				<camel:log loggingLevel="DEBUG" message="HttpResponse : body -> ${body} - headers -> ${headers}" />
				<camel:to uri="direct:getAUTHToken" />
			</camel:onException>
			<camel:bean ref="authToken" id="checkTokenExpiry" method="checkTokenExpiry" />
			<camel:choice>
				<camel:when>	
					<camel:simple>${header.isTokenExpired} == true</camel:simple>
					<camel:removeHeaders pattern="Camel*" />
					<camel:to uri="direct:getAUTHToken" />
				</camel:when>
			</camel:choice>
			<camel:to uri="direct:sfmcDeAPIRoute" />
			<camel:choice>
			    <camel:when>
			    	<camel:simple>${header.deSuccess}</camel:simple>
					<camel:throttle timePeriodMillis="1000">
						<camel:simple>{{email.throttle}}</camel:simple>
						<camel:to uri="freemarker:file:{{so.email.req.template.path}}" />
						<camel:bean ref="authToken" id="setAPIHeaders" method="setAPIHeaders" />
						<camel:log loggingLevel="INFO" message="Invoking EMAIL API service : body -> ${body} - headers -> ${headers}" />
						<camel:toD uri="https4://${header.RestURL}{{env:EMAIL_REQUEST_URL_PATH}}${header.messageKey}" />
						<camel:log loggingLevel="INFO" message="The response received after EMAIL request: body -> ${body} - headers -> ${headers}" />
						<camel:unmarshal ref="json" />
						<camel:bean ref="sfmcMessagingProcessor" id="processMessagingAPIResponse" method="processMessagingAPIResponse" />
						<camel:to uri="seda:dbRoute?waitForTaskToComplete=Never" />
						<camel:choice>
							<camel:when>
								<camel:simple>${body[status]} == "FAILURE"</camel:simple>
								<camel:to uri="seda:registerContact?size={{env:SEDA_REGISTER_CONTACT_SIZE}}&amp;waitForTaskToComplete=Never&amp;blockWhenFull=true" />
							</camel:when>
						</camel:choice>
					</camel:throttle>
				 </camel:when>
			</camel:choice>
		</camel:route>
		
		<camel:route id="sfmcDeAPIRoute">
			<camel:from uri="direct:sfmcDeAPIRoute" />
			<camel:choice>
			    <camel:when>
			    	<camel:simple>{{env:ENABLE_DE_INGESTION}} == "true"</camel:simple>
					<camel:removeHeaders pattern="*" excludePattern="Content-Type" />
					<camel:bean ref="authToken" id="setdeAPIHeaders" method="setAPIHeaders" />
					<camel:to uri="freemarker:file:{{so.deingestion.api.req.template.path}}" />
					<camel:log loggingLevel="INFO" message="Invoking SFMC DE API : body -> ${body}" />
					<camel:toD uri="https4://${header.RestURL}{{env:INGESTION_REQUEST_URL_PATH}}" />
					<camel:log loggingLevel="INFO" message="The response received after SFMC DE API request-> ${body}" />
					<camel:unmarshal ref="json" />
					<camel:bean ref="ingestDEProcessor" id="processAPIResponse" method="processAPIResponse" />
					<camel:choice>
		   				<camel:when>
		    				<camel:simple>${header.deSuccess} == "false"</camel:simple>
		    				<camel:to uri="seda:dbRoute?waitForTaskToComplete=Never" />
		   				</camel:when>						
					</camel:choice>					
			   </camel:when>
			</camel:choice>		
		</camel:route>
		
		<!-- 
			1. Set auth request in body. This auth request should be in json format and config in properties.
			2. Invoke authentication API.
			3. Store auth token and rest url in variable.
		 -->
		<camel:route id="getAuthTokenRoute" startupOrder="1">
			<camel:from uri="direct:getAUTHToken" />
			<camel:setHeader headerName="Content-Type">
				<camel:constant>application/json</camel:constant>
			</camel:setHeader>
			<camel:bean ref="authToken" id="getAuthTokenRequest" method="getAuthTokenRequest" />
			<camel:log loggingLevel="DEBUG" message="Invoking AUTH service : body -> ${body} - headers -> ${headers}" />
			<camel:log loggingLevel="INFO" message="Invoking AUTH service" />
			<camel:to uri="https4://{{env:AUTH_REQUEST_URL}}" />
			<camel:unmarshal ref="json" />
			<camel:log loggingLevel="DEBUG" message="Token received from AUTH API : body -> ${body} - headers -> ${headers}" />
			<camel:bean ref="authToken" id="setVariables" method="setVariables" />
			<camel:log loggingLevel="INFO" message="Authentication token updated" />
			<!-- setting this header 'HttpStatusCode' only when then there is Auth invalidate exception from Message API  -->
			<camel:choice>
				<camel:when>
					<camel:simple>${header.HttpStatusCode}</camel:simple>
					<camel:setBody>
						<camel:simple>${property.OriginalMessage}</camel:simple>
					</camel:setBody>
					<camel:unmarshal ref="json" />
					<camel:to uri="seda:sendEMAILRequest?size={{env:SEDA_EMAILAPI_SIZE}}&amp;waitForTaskToComplete=Never&amp;blockWhenFull=true" />
				</camel:when>
				<camel:when>
					<camel:simple>${header.isTokenExpired} == true</camel:simple>
					<camel:setBody>
						<camel:simple>${property.OriginalMessage}</camel:simple>
					</camel:setBody>
					<camel:unmarshal ref="json" />
				</camel:when>
			</camel:choice>
		</camel:route>
		
		<!--
			1. The following route consumes from seda, works async
			2. Sending to DB queue
		 -->		
		<camel:route id="dbLoggingRoute" startupOrder="6">
			<camel:from uri="seda:dbRoute" />
			<camel:removeHeaders pattern="kafka*" />
			<camel:marshal ref="json" />
			<camel:log loggingLevel="INFO" message="Submit for database logging : body -> ${body} - headers -> ${headers}" />
			<camel:to uri="kafka:{{so.db.topic}}?brokers={{env:SIFT_QUEUES}}" />
		</camel:route>
	
		<!--
			1. The following route consumes from seda, works async
			2. Invoke a freemarker template to prepare the request for registerContact API
			3. invoke registerContact API
		 -->
		<camel:route id="registerContactRoute" startupOrder="7">
			<camel:from uri="direct:registerContact" />
			<camel:onException>
				<camel:exception>org.apache.camel.http.common.HttpOperationFailedException</camel:exception>
				<camel:onWhen>
					<camel:simple>${exception.statusCode} not in {{so.email.successCodes}} </camel:simple>
				</camel:onWhen>
				<camel:redeliveryPolicy maximumRedeliveries="3" redeliveryDelay="5000" backOffMultiplier="4" retryAttemptedLogLevel="WARN" logRetryAttempted="true" />
				<camel:handled>
					<camel:constant>true</camel:constant>
				</camel:handled>
				<camel:log loggingLevel="DEBUG" message="HttpResponse : body -> ${body} - headers -> ${headers}" />
			</camel:onException>
			<camel:choice>
            	<camel:when>
                	<camel:simple>{{env:OPOLO_REGISTER_CONTACT_ENABLE}}</camel:simple>
					<camel:to uri="freemarker:file:{{so.register.contact.template.path}}" />
					<camel:log loggingLevel="INFO" message="Message received in registerContact route: body -> ${body} - headers -> ${headers}" />
					<camel:to uri="http4://{{env:EMAIL_REGISTER_CONTACT_REQUEST_URL}}" />
				</camel:when>
				<camel:otherwise>
					<camel:setHeader headerName="CamelHttpResponseCode">
						<camel:constant>200</camel:constant>
					</camel:setHeader>
				</camel:otherwise>
			</camel:choice>
		</camel:route>
		
		<camel:route id="initializeAuthTokenRouteFirst" startupOrder="8">
			<camel:from uri="timer://initializeToken?repeatCount=1" />
			<camel:log loggingLevel="INFO" message="Initializing authentication token" />
            <camel:to uri="direct:getAUTHToken" />
        </camel:route>

	</camel:camelContext>
</beans>
